link "cobra_str";

namespace _InternalStr {
    external handle new(string initial_value) as "str_new";
    external void delete(handle str_handle) as "str_delete";
    external string toString(handle str_handle) as "str_get_as_string";
    external int length(handle str_handle) as "str_length";
    external bool equals(handle str_handle, string other) as "str_equals";
    external bool equalsHandle(handle h1, handle h2) as "str_equals_handle";
    external handle concat(handle str_handle, string other) as "str_concat";
    external handle concatHandle(handle h1, handle h2) as "str_concat_handle";
    external handle substring(handle str_handle, int start, int length) as "str_substring";
    external handle toUpper(handle str_handle) as "str_to_upper";
    external handle toLower(handle str_handle) as "str_to_lower";
}


namespace String {

    dict newFromHandle(handle h) {
        dict wrapper = {
            _handle: h,

            toString: string () {
                return _InternalStr.toString(h);
            },

            length: int () {
                return _InternalStr.length(h);
            },

            delete: void () {
                _InternalStr.delete(h);
            },

            equals: bool (string other) {
                return _InternalStr.equals(h, other);
            },

            equalsWrapper: bool (dict otherWrapper) {
                return _InternalStr.equalsHandle(h, otherWrapper._handle);
            },

            concat: dict (string other) {
                handle newHandle = _InternalStr.concat(h, other);
                return newFromHandle(newHandle);
            },

            concatWrapper: dict (dict otherWrapper) {
                handle newHandle = _InternalStr.concatHandle(h, otherWrapper._handle);
                return newFromHandle(newHandle);
            },

            substring: dict (int start, int len) {
                handle newHandle = _InternalStr.substring(h, start, len);
                return newFromHandle(newHandle);
            },

            toUpper: dict () {
                handle newHandle = _InternalStr.toUpper(h);
                return newFromHandle(newHandle);
            },

            toLower: dict () {
                handle newHandle = _InternalStr.toLower(h);
                return newFromHandle(newHandle);
            }
        };
        return wrapper;
    }

    dict new(string initial_value) {
        handle initial_handle = _InternalStr.new(initial_value);
        return newFromHandle(initial_handle);
    }
}